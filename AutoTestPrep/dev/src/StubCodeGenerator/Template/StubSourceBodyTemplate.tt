<#@ template language="C#" 
	inherits="StubTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
 *	Stub of <#= TargetFunction.Name #>.
 */
//Declare buffers to store a value passed and pass.
<#= CreateFunctoinCalledCountBufferDeclare(this.TargetFunction) #>;

//Declare buffer to store a value the stub method should return.
<#= CreateFunctionReturnBufferDeclare(this.TargetFunction) #>;

//Declare buffer to store a value passed via arguments.
<# foreach (var argItem in this.TargetFunction.Arguments) {	#>
<#= CreateArgumentBufferDeclare(this.TargetFunction, argItem) #>
<#	}	#>

//Declare buffer to store values the stub should return via argument, pointer.
<# foreach (var argItem in this.TargetFunction.Arguments) {	#>
<#= CreateOutputBufferDeclare(this.TargetFunction, argItem) #>
<#	}	#>

//Initialize buffers.
<#= this.CreateInitializeFunctionDeclare(this.TargetFunction) #>
{
	<#= this.CreateCalledCountInitialize(this.TargetFunction) #> 
	for (int index = 0; index < STUB_BUFFER_SIZE_1; index++)
	{
		<#= this.CreateFunctionReturnBufferInitialize(this.TargetFunction) #>
<# foreach (var argItem in this.TargetFunction.Arguments) { #>
		<#= this.CreateArgumentBufferName(this.TargetFunction, argItem) #>[index] = 0;
<#	}	#>
		for (int index2 = 0; index < STUB_BUFFER_SIZE_2; index2++)
		{
<# foreach (var argItem in this.TargetFunction.Arguments) { #>
			<#= this.CreateOutputArgumentInitialize(this.TargetFunction, argItem) #> = 0;
<#	}	#>
		}
	}
}

//Body of stub function.
<#= this.TargetFunction.ToString() #>
{
	<#=	CreateLatchReturnValueCode(this.TargetFunction) #>;

	//Set argument into buffer.
<# foreach (var argItem in this.TargetFunction.Arguments) { #>
	<#= this.CreateArgumentBufferName(this.TargetFunction, argItem) #>[<#= this.CreateFunctionCalledBufferName(this.TargetFunction) #>] = <#= argItem.Name #>;
<#	}	#>

	//Set back buffer value into argument.
<# foreach (var argItem in this.TargetFunction.Arguments) { #>
	<#= this.CreateSetOutputBufferToArgument(this.TargetFunction, argItem) #>
<#	}	#>

	//Increment called count;
	<#= CreateFunctionCalledBufferName(this.TargetFunction) #>++;

	<#= CreateReturnLatchedValueCode(this.TargetFunction) #>;
}
