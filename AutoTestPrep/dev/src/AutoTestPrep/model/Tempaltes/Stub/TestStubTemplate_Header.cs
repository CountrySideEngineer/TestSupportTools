// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutoTestPrep.Model.Tempaltes.Stub
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class TestStubTemplate_Header : TestStubTemplate_Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("#pragma once\r\n//Sub function called count.\r\n");
            
            #line 9 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionCalledCountBufferDecalre()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 10 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionReturnBufferDeclare()));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n//Argument buffer.\r\n");
            
            #line 13 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
 foreach (var argumentItem in SubFunction.Arguments) { 
            
            #line default
            #line hidden
            
            #line 14 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionArgumentBufferDeclare(argumentItem)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 15 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
	}	
            
            #line default
            #line hidden
            this.Write("//Return value buffer\r\n");
            
            #line 17 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
 foreach (var argumentItem in SubFunction.Arguments) { 
            
            #line default
            #line hidden
            
            #line 18 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionOutputBufferDeclare(argumentItem)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 19 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
	}	
            
            #line default
            #line hidden
            this.Write("\r\n//Function to initialize buffers.\r\n");
            
            #line 22 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateBufferInitializeFunction()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 23 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Header.tt"

	//Methods to create stub header file.

	/// <summary>
	/// Create code declaring variable to set the count the function called.
	/// </summary>
	/// <param name="function">Function information</param>
	/// <returns>Code to declare variable to set the count function called.</returns>
	protected override string CreateFunctionCalledCountBufferDecalre()
	{
		string calledCountBufferName = base.CreateFunctionCalledCountBufferDecalre();
		calledCountBufferName = "extern " + calledCountBufferName;
		calledCountBufferName += ";";
		return calledCountBufferName;
	}

	protected override string CreateFunctionReturnBufferDeclare()
	{
		string returnBufferName = base.CreateFunctionReturnBufferDeclare();
		if (!(string.IsNullOrEmpty(returnBufferName))) {
			returnBufferName = "extern " + returnBufferName;
			returnBufferName += "[];";
		}
		return returnBufferName;
	}

	/// <summary>
	/// Create code of function entry point to initialize 
	/// </summary>
	/// <returns>Code to declare function entry point to initialize buffer parameter.</returns>
	protected override string CreateBufferInitializeFunction()
	{
		string bufferInitializeFunction = base.CreateBufferInitializeFunction();
		bufferInitializeFunction += ";";

		return bufferInitializeFunction;
	}

	/// <summary>
	/// Create code to declare buffer for argument
	/// </summary>
	/// <param name="function">Function data.</param>
	/// <param name="argument">Argument data.</param>
	/// <returns>Code to declare argument buffer extern.</returns>
	protected override string CreateFunctionArgumentBufferDeclare(Parameter argument)
	{
		string argumentBufferDeclare = base.CreateFunctionArgumentBufferDeclare(argument);
		if (!(string.IsNullOrEmpty(argumentBufferDeclare)))
		{
			argumentBufferDeclare = "extern " + argumentBufferDeclare;
			argumentBufferDeclare += "[];";
		}
		else
		{
			argumentBufferDeclare = $"//Argument {argument.Name} does not need buffer.";
		}
		return argumentBufferDeclare;
	}

	/// <summary>
	/// Create code to declare buffer for output.
	/// </summary>
	/// <param name="argument">Argument information.</param>
	/// <returns>Code to declare output buffer variable.</returns>
	protected override string CreateFunctionOutputBufferDeclare(Parameter argument)
	{
		string outputBufferDeclare = string.Empty;
		try
		{
			outputBufferDeclare = base.CreateFunctionOutputBufferDeclare(argument);
			if (!(string.IsNullOrEmpty(outputBufferDeclare)))
			{
				outputBufferDeclare = "extern " + outputBufferDeclare;
				outputBufferDeclare += "[]";
				if (2 == argument.PointerNum)
				{
					outputBufferDeclare += $"[STUB_BUFFER_SIZE_2]";
				}
			}
			else
			{
				outputBufferDeclare = $"//{argument.Name} does not need output buffer.";
			}
		}
		catch (ArgumentException)
		{
			outputBufferDeclare = $"//{argument.Name} does not need output buffer.";
		}
		catch (Exception)
		{
			outputBufferDeclare = "Argument does not need output buffer.";
		}
		return outputBufferDeclare;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
