<#@ template language="C#" 
	inherits="TestStubTemplate_Base" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
 *	<#= base.SubFunction.Name #> stub source code.
 */
<#
	foreach (var headerFile in this.TestDataInfo.StubIncludeStandardHeaderFiles) {
		if ((!(string.IsNullOrEmpty(headerFile))) && (!(string.IsNullOrWhiteSpace(headerFile)))) {
#>
#include <<#= headerFile #>>
<#		
		}
	}
#>
<#
	foreach (var headerFile in this.TestDataInfo.StubIncludeUserHeaderFiles) {
		if ((!(string.IsNullOrEmpty(headerFile))) && (!(string.IsNullOrWhiteSpace(headerFile)))) {
#>
#include "<#= headerFile #>"
<#		}
	}
#>

//Declare buffers to store a value passed and pass.
<#= CreateFunctionCalledCountBufferDecalre() #>
<#= CreateFunctionReturnBufferDeclare() #>

//Argument buffer
<# foreach (var argumentItem in SubFunction.Arguments) { #>
<#= CreateFunctionArgumentBufferDeclare(argumentItem) #>
<#= CreateFunctionOutputBufferDeclare(argumentItem) #>
<#	}	#>

//Initialize buffers.
<#= CreateBufferInitializeFunction() #>
{
	<#= CreateFunctionCalledCountBufferName() #> = 0;
	for (int index = 0; index < STUB_BUFFER_SIZE_1; index++) {
<# foreach (var argumentItem in SubFunction.Arguments) { #>
		<#= CreateArgumentInitializeCode_1(argumentItem, "index") #>
<#	}	#>
		for (int index2 = 0; index2 < STUB_BUFFER_SIZE_2; index2++) {
<# foreach (var argumentItem in SubFunction.Arguments) { #>
			<#= CreateArgumentInitializeCode_2(argumentItem, "index", "index2") #>
<#	}	#>
		}
	}
}

//Stub of function.
<#= this.SubFunction.ToString() #>
{
	<#= CreateLatchReturnValue() #>

<# foreach (var argumentItem in SubFunction.Arguments) {	#>
	<#= CreateSetArgumentToBuffer(argumentItem) #>
<#	}	#>
	for (int index = 0; index < STUB_BUFFER_SIZE_2; index++) {
<#	foreach (var argumentItem in SubFunction.Arguments) {	#>
		<#= CreateSetOutputBufferToArgument(argumentItem, "index")	#>
<#	}	#>
	}

	//Increment called count.
	<#= CreateCalledCountUpdate() #>

	//Return value;
	<#= CreateReturnValue() #>
}
<#+
	//Methods to create code for source stub files.

	protected override string CreateFunctionArgumentBufferDeclare(Parameter argument)
	{
		string argumentBufferDeclare = base.CreateFunctionArgumentBufferDeclare(argument);
		argumentBufferDeclare += "[STUB_BUFFER_SIZE_1];";
		return argumentBufferDeclare;
	}

	protected virtual string CreateArgumentInitializeCode_1(Parameter argument, string indexName)
	{
		string variableInitializeCode = $"{this.SubFunction.Name}_{argument.Name}[{indexName}]";
		if (0 < argument.PointerNum) {
			variableInitializeCode += " = null;";
		}
		else
		{
			variableInitializeCode += " = 0;";
		}
		return variableInitializeCode;
	}

	protected virtual string CreateArgumentInitializeCode_2(Parameter argument, string indexName, string indexName2)
	{
		string outputVariable = string.Empty;
		if (1 == argument.PointerNum)
		{
			if ((argument.Mode == Parameter.AccessMode.Out) ||
				(argument.Mode == Parameter.AccessMode.Both))
			{
				outputVariable = $"{this.SubFunction.Name}_{argument.Name}_value[{indexName}] = 0;";
			}
			else
			{
				outputVariable = $"//{argument.Name} is not output.";
			}
		}
		else if (2 == argument.PointerNum)
		{
			if ((argument.Mode == Parameter.AccessMode.Out) ||
				(argument.Mode == Parameter.AccessMode.Both))
			{
				outputVariable = $"{this.SubFunction.Name}_{argument.Name}_value[{indexName}][{indexName2}] = 0;";
			}
			else
			{
				outputVariable = $"//{argument.Name} is not output.";
			}
		}
		else
		{
			outputVariable = $"//{argument.Name} is not output.";
		}
		return outputVariable;
	}

	/// <summary>
	/// Create code to declare buffer to store the value the stub should rerturn.
	/// </summary>
	/// <returns>Code to declare to store the value the stub should return.</returns>
	protected override string CreateFunctionReturnBufferDeclare()
	{
		string returnBufferName = string.Empty;
		returnBufferName = base.CreateFunctionReturnBufferDeclare();
		if (!string.IsNullOrEmpty(returnBufferName))
		{
			returnBufferName = $"{returnBufferName}[STUB_BUFFER_SIZE_1];";
		}
		else
		{
			returnBufferName = $"//{this.SubFunction.Name} does not return value.";
		}
		return returnBufferName;
	}

	/// <summary>
	/// Create code to declare buffer to store values the stub should return via pointer variable.
	/// </summary>
	/// <param name="argument">Argument data.</param>
	/// <returns>Code to declare buffer to store values the stub should return.</returns>
	protected override string CreateFunctionOutputBufferDeclare(Parameter argument)
	{
		string outputBufferDeclare = string.Empty;
		try
		{
			outputBufferDeclare = base.CreateFunctionOutputBufferDeclare(argument);
			if (!string.IsNullOrEmpty(outputBufferDeclare))
			{
				outputBufferDeclare = $"{outputBufferDeclare}[STUB_BUFFER_SIZE_1]";
				if (2 == argument.PointerNum)
				{
					outputBufferDeclare = $"{outputBufferDeclare}[STUB_BUFFER_SIZE_2]";
				}
				outputBufferDeclare = $"{outputBufferDeclare};";
			}
			else
			{
				outputBufferDeclare = $"//{argument.Name} does not output.";
			}
		}
		catch (Exception)
		{
			outputBufferDeclare = $"//{argument.Name} does not output.";
		}
		return outputBufferDeclare;
	}

	/// <summary>
	/// Create code to latch return buffer value.
	/// </summary>
	/// <returns>Code to latch return buffer value.</returns>
	protected virtual string CreateLatchReturnValue()
	{
		string latchReturnValueCode = string.Empty;
		if (this.SubFunction.HasReturn())
		{
			latchReturnValueCode = $"{this.SubFunction.ActualDataType()} returnLatch = " +
				$"{base.CreateFunctionReturnBufferName()}" +
				$"[{base.CreateFunctionCalledCountBufferName()}];";
		}
		else
		{
			latchReturnValueCode = $"//{this.SubFunction.Name} does not return value.";
		}
		return latchReturnValueCode;
	}

	/// <summary>
	/// Create code to return latched value.
	/// </summary>
	/// <returns>Code to return latched value.</returns>
	protected virtual string CreateReturnValue()
	{
		string returnValueCode = string.Empty;
		if (this.SubFunction.HasReturn())
		{
			returnValueCode = "return returnLatch;";
		}
		else
		{
			returnValueCode = $"//{this.SubFunction.Name} does not return value.";
		}
		return returnValueCode;
	}

	/// <summary>
	/// Set argumet value into buffer.
	/// </summary>
	/// <param name="argument">Argument data.</param>
	/// <returns>Code to set argument into buffer.</returns>
	protected virtual string CreateSetArgumentToBuffer(Parameter argument)
	{
		string argumentToBufferCode = string.Empty;
		if ((("void").Equals(argument.DataType)) &&
			(0 == argument.PointerNum))
		{
			argumentToBufferCode = $"//{argument.Name} does not need keep value.";
		}
		else
		{
			argumentToBufferCode = $"{this.SubFunction.Name}_{argument.Name}" +
				$"[{base.CreateFunctionCalledCountBufferName()}] = " +
				$"{argument.Name};";
		}
		return argumentToBufferCode;
	}

	/// <summary>
	/// Create code to set buffer value into pointer argument.
	/// </summary>
	/// <param name="argument">Argument data.</param>
	/// <param name="indexName">"index" variable name.</param>
	/// <returns>Code to set buffer value into pointer argument.</returns>
	protected virtual string CreateSetOutputBufferToArgument(Parameter argument, string indexName)
	{
		string bufferToArgumentCode = string.Empty;
		if ((1 == argument.PointerNum) ||
			(2 == argument.PointerNum))
		{
			if ((argument.Mode == Parameter.AccessMode.Out) ||
				(argument.Mode == Parameter.AccessMode.Both))
			{
				bufferToArgumentCode = $"{argument.Name}[{indexName}] = " +
					$"{base.CreateOutputBufferName(argument)}" +
					$"[{base.CreateFunctionCalledCountBufferName()}]" +
					$"[{indexName}];";
			}
			else
			{
				bufferToArgumentCode = $"//{argument.Name} does not return value.";
			}
		}
		else
		{
			bufferToArgumentCode = $"//{argument.Name} does not return value.";
		}
		return bufferToArgumentCode;
	}

	/// <summary>
	/// Create code to increment the number of the stub called count.
	/// </summary>
	/// <returns>Code to set increment the numer of the stub called count.</returns>
	protected virtual string CreateCalledCountUpdate()
	{
		string calledCountUpdate = string.Empty;
		calledCountUpdate = $"{base.CreateFunctionCalledCountBufferName()}++;";
		return calledCountUpdate;
	}
#>
