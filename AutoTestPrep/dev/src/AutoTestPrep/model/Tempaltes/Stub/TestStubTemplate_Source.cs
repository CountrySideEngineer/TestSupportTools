// ------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン: 16.0.0.0
//  
//     このファイルへの変更は、正しくない動作の原因になる可能性があり、
//     コードが再生成されると失われます。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace AutoTestPrep.Model.Tempaltes.Stub
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class TestStubTemplate_Source : TestStubTemplate_Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("/*\r\n *\t");
            
            #line 8 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(base.SubFunction.Name));
            
            #line default
            #line hidden
            this.Write(" stub source code.\r\n */\r\n//Declare buffers to store a value passed and pass.\r\n");
            
            #line 11 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionCalledCountBufferDecalre()));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 12 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionReturnBufferDeclare()));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n//Argument buffer\r\n");
            
            #line 15 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
 foreach (var argumentItem in SubFunction.Arguments) { 
            
            #line default
            #line hidden
            
            #line 16 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionArgumentBufferDeclare(argumentItem)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 17 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionOutputBufferDeclare(argumentItem)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 18 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
	}	
            
            #line default
            #line hidden
            this.Write("\r\n//Initialize buffers.\r\n");
            
            #line 21 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateBufferInitializeFunction()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t");
            
            #line 23 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateFunctionCalledCountBufferName()));
            
            #line default
            #line hidden
            this.Write(" = 0;\r\n\tfor (int index = 0; index < STUB_BUFFER_SIZE_1; index++) {\r\n");
            
            #line 25 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
 foreach (var argumentItem in SubFunction.Arguments) { 
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 26 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateArgumentInitializeCode_1(argumentItem, "index")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 27 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
	}	
            
            #line default
            #line hidden
            this.Write("\t\tfor (int index2 = 0; index2 < STUB_BUFFER_SIZE_2; index2++) {\r\n");
            
            #line 29 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
 foreach (var argumentItem in SubFunction.Arguments) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 30 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateArgumentInitializeCode_2(argumentItem, "index", "index2")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 31 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
	}	
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}\r\n\r\n//Stub of function.\r\n");
            
            #line 37 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.SubFunction.ToString()));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t");
            
            #line 39 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateLatchReturnValue()));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 41 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
 foreach (var argumentItem in SubFunction.Arguments) {	
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 42 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateSetArgumentToBuffer(argumentItem)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 43 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
	}	
            
            #line default
            #line hidden
            this.Write("\tfor (int index = 0; index < STUB_BUFFER_SIZE_2; index++) {\r\n");
            
            #line 45 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
	foreach (var argumentItem in SubFunction.Arguments) {	
            
            #line default
            #line hidden
            this.Write("\t\t");
            
            #line 46 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateSetOutputBufferToArgument(argumentItem, "index")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 47 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
	}	
            
            #line default
            #line hidden
            this.Write("\t}\r\n\r\n\t//Increment called count.\r\n\t");
            
            #line 51 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateCalledCountUpdate()));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t//Return value;\r\n\t");
            
            #line 54 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CreateReturnValue()));
            
            #line default
            #line hidden
            this.Write("\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 56 "E:\development\TestSupportTools\AutoTestPrep\dev\src\AutoTestPrep\Model\Tempaltes\Stub\TestStubTemplate_Source.tt"

	//Methods to create code for source stub files.

	protected override string CreateFunctionArgumentBufferDeclare(Parameter argument)
	{
		string argumentBufferDeclare = base.CreateFunctionArgumentBufferDeclare(argument);
		argumentBufferDeclare += "[STUB_BUFFER_SIZE_1];";
		return argumentBufferDeclare;
	}

	protected virtual string CreateArgumentInitializeCode_1(Parameter argument, string indexName)
	{
		string variableInitializeCode = $"{this.SubFunction.Name}_{argument.Name}[{indexName}]";
		if (0 < argument.PointerNum) {
			variableInitializeCode += " = null;";
		}
		else
		{
			variableInitializeCode += " = 0;";
		}
		return variableInitializeCode;
	}

	protected virtual string CreateArgumentInitializeCode_2(Parameter argument, string indexName, string indexName2)
	{
		string outputVariable = string.Empty;
		if (1 == argument.PointerNum)
		{
			if ((argument.Mode == Parameter.AccessMode.Out) ||
				(argument.Mode == Parameter.AccessMode.Both))
			{
				outputVariable = $"{this.SubFunction.Name}_{argument.Name}_value[{indexName}] = 0;";
			}
			else
			{
				outputVariable = $"//{argument.Name} is not output.";
			}
		}
		else if (2 == argument.PointerNum)
		{
			if ((argument.Mode == Parameter.AccessMode.Out) ||
				(argument.Mode == Parameter.AccessMode.Both))
			{
				outputVariable = $"{this.SubFunction.Name}_{argument.Name}_value[{indexName}][{indexName2}] = 0;";
			}
			else
			{
				outputVariable = $"//{argument.Name} is not output.";
			}
		}
		else
		{
			outputVariable = $"//{argument.Name} is not output.";
		}
		return outputVariable;
	}

	/// <summary>
	/// Create code to declare buffer to store the value the stub should rerturn.
	/// </summary>
	/// <returns>Code to declare to store the value the stub should return.</returns>
	protected override string CreateFunctionReturnBufferDeclare()
	{
		string returnBufferName = string.Empty;
		returnBufferName = base.CreateFunctionReturnBufferDeclare();
		if (!string.IsNullOrEmpty(returnBufferName))
		{
			returnBufferName = $"{returnBufferName}[STUB_BUFFER_SIZE_1];";
		}
		else
		{
			returnBufferName = $"//{this.SubFunction.Name} does not return value.";
		}
		return returnBufferName;
	}

	/// <summary>
	/// Create code to declare buffer to store values the stub should return via pointer variable.
	/// </summary>
	/// <param name="argument">Argument data.</param>
	/// <returns>Code to declare buffer to store values the stub should return.</returns>
	protected override string CreateFunctionOutputBufferDeclare(Parameter argument)
	{
		string outputBufferDeclare = string.Empty;
		try
		{
			outputBufferDeclare = base.CreateFunctionOutputBufferDeclare(argument);
			if (!string.IsNullOrEmpty(outputBufferDeclare))
			{
				outputBufferDeclare = $"{outputBufferDeclare}[STUB_BUFFER_SIZE_1]";
				if (2 == argument.PointerNum)
				{
					outputBufferDeclare = $"{outputBufferDeclare}[STUB_BUFFER_SIZE_2]";
				}
				outputBufferDeclare = $"{outputBufferDeclare};";
			}
			else
			{
				outputBufferDeclare = $"//{argument.Name} does not output.";
			}
		}
		catch (Exception)
		{
			outputBufferDeclare = $"//{argument.Name} does not output.";
		}
		return outputBufferDeclare;
	}

	/// <summary>
	/// Create code to latch return buffer value.
	/// </summary>
	/// <returns>Code to latch return buffer value.</returns>
	protected virtual string CreateLatchReturnValue()
	{
		string latchReturnValueCode = string.Empty;
		if (this.SubFunction.HasReturn())
		{
			latchReturnValueCode = $"{this.SubFunction.ActualDataType()} returnLatch = " +
				$"{base.CreateFunctionReturnBufferName()}" +
				$"[{base.CreateFunctionCalledCountBufferName()}];";
		}
		else
		{
			latchReturnValueCode = $"//{this.SubFunction.Name} does not return value.";
		}
		return latchReturnValueCode;
	}

	/// <summary>
	/// Create code to return latched value.
	/// </summary>
	/// <returns>Code to return latched value.</returns>
	protected virtual string CreateReturnValue()
	{
		string returnValueCode = string.Empty;
		if (this.SubFunction.HasReturn())
		{
			returnValueCode = "return returnLatch;";
		}
		else
		{
			returnValueCode = $"//{this.SubFunction.Name} does not return value.";
		}
		return returnValueCode;
	}

	/// <summary>
	/// Set argumet value into buffer.
	/// </summary>
	/// <param name="argument">Argument data.</param>
	/// <returns>Code to set argument into buffer.</returns>
	protected virtual string CreateSetArgumentToBuffer(Parameter argument)
	{
		string argumentToBufferCode = string.Empty;
		if ((("void").Equals(argument.DataType)) &&
			(0 == argument.PointerNum))
		{
			argumentToBufferCode = $"//{argument.Name} does not need keep value.";
		}
		else
		{
			argumentToBufferCode = $"{this.SubFunction.Name}_{argument.Name}" +
				$"[{base.CreateFunctionCalledCountBufferName()}] = " +
				$"{argument.Name};";
		}
		return argumentToBufferCode;
	}

	/// <summary>
	/// Create code to set buffer value into pointer argument.
	/// </summary>
	/// <param name="argument">Argument data.</param>
	/// <param name="indexName">"index" variable name.</param>
	/// <returns>Code to set buffer value into pointer argument.</returns>
	protected virtual string CreateSetOutputBufferToArgument(Parameter argument, string indexName)
	{
		string bufferToArgumentCode = string.Empty;
		if ((1 == argument.PointerNum) ||
			(2 == argument.PointerNum))
		{
			if ((argument.Mode == Parameter.AccessMode.Out) ||
				(argument.Mode == Parameter.AccessMode.Both))
			{
				bufferToArgumentCode = $"{argument.Name}[{indexName}] = " +
					$"{base.CreateOutputBufferName(argument)}" +
					$"[{base.CreateFunctionCalledCountBufferName()}]" +
					$"[{indexName}];";
			}
			else
			{
				bufferToArgumentCode = $"//{argument.Name} does not return value.";
			}
		}
		else
		{
			bufferToArgumentCode = $"//{argument.Name} does not return value.";
		}
		return bufferToArgumentCode;
	}

	/// <summary>
	/// Create code to increment the number of the stub called count.
	/// </summary>
	/// <returns>Code to set increment the numer of the stub called count.</returns>
	protected virtual string CreateCalledCountUpdate()
	{
		string calledCountUpdate = string.Empty;
		calledCountUpdate = $"{base.CreateFunctionCalledCountBufferName()}++;";
		return calledCountUpdate;
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
