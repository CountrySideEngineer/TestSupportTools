<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	Func<Function, string> CreateArgumentDeclare = target =>
	{
		string declare = string.Empty;
		try {
			foreach (var argument in target.Arguments)
			{
				declare += argument.ToString();
				declare += " = 0;";
				declare += Environment.NewLine;
			}
		}
		catch (NullReferenceException)
		{
			//Skip!
		}
		return declare;
	};
#>
//Test Target
<#= Test.Target.ToString() #>;

//Setup test case
void <#= Test.Target.Name #>_test::SetUp()
{
<#
if (null != Test.Target.SubFunctions) {
	foreach (var subFunction in Test.Target.SubFunctions) {
#>
	<#= subFunction.Name #>_Init();
<#
	}
}
#>
}

<#
for (int index = 0; index < Test.TestCases.Count(); index++) {
	var testCase = Test.TestCases.ElementAt(index);
#>
TEST_F(<#= Test.Name #>, <#= Test.Target.Name #>_)
{
	//Argument declare
	<#= CreateArgumentDeclare(Test.Target) #>
}
<#
}
#>